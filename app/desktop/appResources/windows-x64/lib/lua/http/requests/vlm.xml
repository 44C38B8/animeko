<?xml version="1.0" encoding="utf-8" standalone="yes" ?><?vlc --[[vim:syntax=lua<!--  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - >
<  vlm.xml: VLC media player web interface
< - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - >
<  Copyright (C) 2005-2006 the VideoLAN team
< 
<  Authors: Antoine Cellerier <dionoea -at- videolan -dot- org>
< 
<  This program is free software; you can redistribute it and/or modify
<  it under the terms of the GNU General Public License as published by
<  the Free Software Foundation; either version 2 of the License, or
<  (at your option) any later version.
< 
<  This program is distributed in the hope that it will be useful,
<  but WITHOUT ANY WARRANTY; without even the implied warranty of
<  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
<  GNU General Public License for more details.
< 
<  You should have received a copy of the GNU General Public License
<  along with this program; if not, write to the Free Software
<  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
< - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        ]]

        local function insert_children(c,t)if c.children thenfor _, d in ipairs(c.children) dotable.insert(t,d.value or d.name)endendendlocal function print_table(name,t)print("
<"..name.."s>")if #t ~= 0 thenfor _,v in ipairs(t) doprint("<"..name..">")print(vlc.strings.convert_xml_special_chars(v))print("</"..name..">")endendprint("</"..name.."s>")endlocal function print_media(m)local name = m.namelocal type_, enabled, outputlocal loop = ""local inputs = {}local options = {}local instances = {}for _,c in ipairs(m.children) doif c.name=="type" thentype_ = c.valueelseif c.name=="enabled" thenenabled = c.valueelseif c.name=="loop" thenloop = c.valueelseif c.name=="output" thenoutput = c.valueelseif c.name=="inputs" theninsert_children(c,inputs)elseif c.name=="options" theninsert_children(c,options)elseif c.name=="instances" thenif c.children thenfor _, d in ipairs(c.children) dolocal instance = "<instance "for _,e in ipairs(d.children) doinstance = instance .. vlc.strings.convert_xml_special_chars(e.name) .. "=\"" .. vlc.strings.convert_xml_special_chars(e.value) .. "\" "endinstance = instance .. "/>"table.insert(instances,instance)endendendendprint("<"..type_.." name=\""..vlc.strings.convert_xml_special_chars(name).."\" enabled=\""..vlc.strings.convert_xml_special_chars(enabled).."\" loop=\""..vlc.strings.convert_xml_special_chars(loop).."\">\n")print("<output>
"..vlc.strings.convert_xml_special_chars(output).."
</output>\n")print_table("input",inputs)print_table("option",options)print "<instances>\n"
if #instances ~= 0 then
print(table.concat(instances))
end
print "
</instances>\n"print("</"..type_..">\n")end

        local function print_schedule(m)local name = m.namelocal enabled, date, period, repeat_ = "", "", "", ""local commands = {}for _,c in ipairs(m.children) doif c.name=="enabled" thenenabled = c.valueelseif c.name=="date" thendate = c.valueelseif c.name=="period" thenperiod = c.valueelseif c.name=="repeat" thenrepeat_ = c.valueelseif c.name=="commands" theninsert_children(c,commands)endendprint("<schedule
name=\""..vlc.strings.convert_xml_special_chars(name).."\" enabled=\""..vlc.strings.convert_xml_special_chars(enabled).."\" period=\""..vlc.strings.convert_xml_special_chars(period).."\" repeat=\""..vlc.strings.convert_xml_special_chars(repeat_).."\">\n")print_table("command",commands)print("</schedule>\n")end

        local function print_xml(m)print "<vlm>"
if m then
for _, c in ipairs(m.children) do
if c.name=="media" and c.children then
for _, d in ipairs(c.children) do
print_media(d)
end
elseif c.name=="schedule" and c.children then
for _, d in ipairs(c.children) do
print_schedule(d)
end
end
end
else
print "oops"
end
print "
</vlm>"end

        local function print_msg(m)if not m then return endprint("<"..m.name..">\n")if m.children thenfor _, child in ipairs(m.children) doprint_msg(child)endelseif m.value thenprint(m.value)endprint("</"..m.name..">\n")end

        local msg = vlm:execute_command("show")print_xml(msg)--print_msg(msg)

        ?>
