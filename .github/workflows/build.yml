name: Build


on:
  push:
    paths-ignore:
      - '**/*.md'
  pull_request:
    paths-ignore:
      - '**/*.md'

jobs:
  build:
    name: "Build (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
          - ubuntu-20.04
          - macos-12
    env:
      enableLocalPublishingTest: 'false'
      gradleArgs: >-
        --scan
        "-Dorg.gradle.jvmargs=-Xmx4096m" 
        "-Dfile.encoding=UTF-8"
        --no-configuration-cache 
        "-Pbangumi.oauth.client.android.appId=${{ secrets.BANGUMI_OAUTH_CLIENT_ANDROID_ID }}" 
        "-Pbangumi.oauth.client.android.secret=${{ secrets.BANGUMI_OAUTH_CLIENT_ANDROID_SECRET }}"
        "-Pbangumi.oauth.client.desktop.appId=${{ secrets.BANGUMI_OAUTH_CLIENT_DESKTOP_ID }}" 
        "-Pbangumi.oauth.client.desktop.secret=${{ secrets.BANGUMI_OAUTH_CLIENT_DESKTOP_SECRET }}"

      isMac: ${{ startsWith(matrix.os, 'macos') }}
      isWindows: ${{ startsWith(matrix.os, 'windows') }}
      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}
      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 17
      
      #      - name: Get current branch name and short SHA
      #        uses: satackey/action-js-inline@v0.0.2
      #        id: versionName # ${{ steps.versionName.outputs.versionName }}
      #        with:
      #          script: |
      #            const core = require('@actions/core')
      #
      #            // Get branch name
      #            const ref = process.env.GITHUB_REF // e.g., refs/heads/master
      #            const branch = ref.split('/').pop() // e.g., master
      #            core.setOutput('branch', branch)
      #
      #            // Get short commit SHA
      #            const shortSHA = process.env.GITHUB_SHA.substring(0, 8)
      #            core.setOutput('shortSHA', shortSHA)
      #            
      #            const fs = require('fs');
      #            const path = require('path');
      #            
      #            // Path to your gradle.properties file
      #            const gradlePropertiesPath = path.join(__dirname, 'gradle.properties');
      #            
      #            // Function to read the file and extract the version name synchronously
      #            function extractVersionNameSync(filePath) {
      #              try {
      #                // Read file contents synchronously
      #                const data = fs.readFileSync(filePath, 'utf8');
      #            
      #                // Regular expression to match the version name
      #                const regex = /version.name=(.+)-dev/;
      #                const match = data.match(regex);
      #            
      #                if (match && match[1]) {
      #                  return match[1];
      #                } else {
      #                  console.log('No version name found or does not match the pattern.');
      #                }
      #              } catch (err) {
      #                console.error('Error reading the file:', err);
      #              }
      #            }
      #            
      #            // Extract the version name from the gradle.properties file
      #            const version = extractVersionNameSync(gradlePropertiesPath);
      #
      #            core.setOutput('versionName', version + branch + shortSHA)
      #
      #      - name: Output current commit ref
      #        run: echo "The current commit ref is ${{ steps.versionName.outputs.versionName }}"
      
      #      - name: Set version
      #        uses: jacobtomlinson/gha-find-replace@v3
      #        with:
      #          find: "version.name=(.+)-dev"
      #          replace: "version.name=${{ steps.versionName.outputs.versionName }}"
      #          regex: true
      #          include: "gradle.properties"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Cache Konan
        uses: pat-s/always-upload-cache@v3
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Cache Gradle
        uses: pat-s/always-upload-cache@v3
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Maven
        uses: pat-s/always-upload-cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - if: ${{ env.isUnix == 'true' }}
        run: chmod -R 777 *

      - name: Clean and download dependencies
        run: ./gradlew clean ${{ env.gradleArgs }}

      - name: Update version name
        run: ./gradlew updateVersionNameFromGit ${{ env.gradleArgs }}


      - if: ${{ env.isMac == 'true' }}
        name: Prepare signing key
        id: android_signing_key
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: 'android_signing_key'
          fileDir: './'
          encodedString: ${{ secrets.SIGNING_RELEASE_STOREFILE }}

      - if: ${{ env.isMac == 'true' }}
        name: Build Android APK
        run: ./gradlew assembleRelease ${{ env.gradleArgs }}
        env:
          "signing_release_storeFileFromRoot": ${{ steps.android_signing_key.outputs.filePath }}
          "signing_release_storePassword": ${{ secrets.SIGNING_RELEASE_STOREPASSWORD }}
          "signing_release_keyAlias": ${{ secrets.SIGNING_RELEASE_KEYALIAS }}
          "signing_release_keyPassword": ${{ secrets.SIGNING_RELEASE_KEYPASSWORD }}

      - if: ${{ env.isMac == 'true' }}
        name: Upload Android APK packages
        uses: actions/upload-artifact@v4
        with:
          name: ani-android
          path: app/android/build/outputs/apk/release/android-release.apk


      - name: Assemble
        run: ./gradlew assemble ${{ env.gradleArgs }}

      - name: Check
        run: ./gradlew check ${{ env.gradleArgs }}

      - name: Package
        run: ./gradlew createDistributable ${{ env.gradleArgs }}

      - name: Package
        run: ./gradlew packageDistributionForCurrentOS ${{ env.gradleArgs }}
      
      #        continue-on-error: true

      #      - if: ${{ env.isMac == 'true' }}
      #        name: Upload error logs
      #        uses: actions/upload-artifact@v3
      #        with:
      #          name: errors-${{ matrix.os }}
      #          path: desktop/build/compose/logs/
      #        continue-on-error: true

      - if: ${{ env.isMac == 'true' }}
        name: Upload macOS packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-macos
          path: desktop/build/compose/binaries/main/app

      - if: ${{ env.isMac == 'true' }}
        name: Upload macOS packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-macos-installer
          path: desktop/build/compose/binaries/main/dmg

      - if: ${{ env.isUbuntu == 'true' }}
        name: Upload Linux packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-linux
          path: desktop/build/compose/binaries/main/app

      - if: ${{ env.isUbuntu == 'true' }}
        name: Upload Linux packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-ubuntu-installer
          path: desktop/build/compose/binaries/main/deb

      - if: ${{ env.isUbuntu == 'true' }}
        name: Upload Linux packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-redhat-installer
          path: desktop/build/compose/binaries/main/rpm

      - if: ${{ env.isWindows == 'true' }}
        name: Upload Windows packages
        uses: actions/upload-artifact@v3
        with:
          name: ani-windows
          path: desktop/build/compose/binaries/main/app
